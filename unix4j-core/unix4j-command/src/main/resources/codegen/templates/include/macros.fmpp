<#macro optionJavadoc myName aliasName myPre aliasPre javadoc setComment> 
	/**
	 * Option {@code "${myPre}${myName}"}: ${javadoc}
	 * <p>
	 * The option {@code "${myPre}${myName}"} is equivalent to the {@code "${aliasPre}}{@link #${aliasName} ${aliasName}}{@code "} option.
<#if setComment>
	 * <p>
	 * Technically speaking, this field points to a set with the options of the 
	 * current set plus the option {@code "${myPre}${myName}"}. If the option {@code "${myPre}${myName}"}
	 * is already set, the field {@code ${myName}} points to the enum constant itself
	 * as it already represents the current set of options.
</#if> 
	 */
</#macro>
<#macro optionJavadocLong opt setComment> 
	<@optionJavadoc opt.name opt.acronym "--" "-" opt.desc setComment/>
</#macro>
<#macro optionJavadocAcronym opt setComment> 
	<@optionJavadoc opt.acronym opt.name "-" "--" opt.desc setComment/>
</#macro>

<#function normalizeVarArgType type boxPrimitives>
	<#if boxPrimitives>
		<#if type == "int">
			<#local normalized="Integer">
		<#elseif type == "long">
			<#local normalized="Long">
		<#elseif type == "double">
			<#local normalized="Double">
		<#elseif type == "float">
			<#local normalized="Float">
		<#elseif type == "char">
			<#local normalized="Character">
		<#elseif type == "boolean">
			<#local normalized="Boolean">
		<#else>
			<#local normalized=type>
		</#if>
	<#else>
		<#local normalized=type>
	</#if>
	<#if normalized?ends_with("...")>
		<#return normalized?substring(0, normalized?length-3)+"[]">
	<#else>
		<#return normalized>
	</#if>
</#function>

<#function rawType type>
	<#if type?contains("<")>
		<#-- cut off the generic stuff -->
		<#return type?substring(0, type?index_of("<"))>
	<#else>
		<#return type>
	</#if>
</#function>

